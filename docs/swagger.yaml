definitions:
  domain.Bus:
    properties:
      id:
        type: string
      number:
        type: string
      total_seats:
        type: integer
    type: object
  domain.Route:
    properties:
      available_seats:
        type: integer
      bus_id:
        type: string
      created_at:
        type: string
      departure:
        type: string
      destination:
        type: string
      end_date:
        type: string
      id:
        type: string
      price:
        type: integer
      start_date:
        type: string
      updated_at:
        type: string
    type: object
  domain.User:
    properties:
      FirebaseUID:
        type: string
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      phone:
        type: string
      require_password_reset:
        type: boolean
      role:
        type: string
      updated_at:
        type: string
    type: object
  errs.Err:
    properties:
      errDesc:
        type: string
      error:
        type: string
    type: object
  model.CreateRequest:
    properties:
      number:
        type: string
      total_seats:
        type: integer
    type: object
  model.CreateRouteRequest:
    properties:
      bus_id:
        type: string
      departure:
        type: string
      destination:
        type: string
      end_date:
        type: string
      price:
        minimum: 0
        type: integer
      start_date:
        type: string
    required:
    - bus_id
    - departure
    - destination
    - end_date
    - price
    - start_date
    type: object
  model.UpdateRouteRequest:
    properties:
      bus_id:
        type: string
      departure:
        type: string
      destination:
        type: string
      end_date:
        type: string
      price:
        minimum: 0
        type: integer
      start_date:
        type: string
    required:
    - bus_id
    - departure
    - destination
    - end_date
    - price
    - start_date
    type: object
  model.UpdateUserRequest:
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      phone:
        type: string
    type: object
info:
  contact: {}
  description: API documentation for Aulway.
  title: Aulway API
  version: "1.0"
paths:
  /admin/routes:
    get:
      consumes:
      - application/json
      description: Retrieve a list of available routes based on filters
      parameters:
      - description: Departure location
        in: query
        name: departure
        required: true
        type: string
      - description: Destination location
        in: query
        name: destination
        required: true
        type: string
      - description: 'Travel date (format: YYYY-MM-DD)'
        in: query
        name: date
        required: true
        type: string
      - description: Number of passengers
        in: query
        name: passengers
        required: true
        type: integer
      - description: 'Page number for pagination (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size for pagination (default: 30)'
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of routes
          schema:
            items:
              items:
                $ref: '#/definitions/domain.Route'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.Err'
      security:
      - BearerAuth: []
      summary: Get Routes List
      tags:
      - route
  /api/routes:
    get:
      consumes:
      - application/json
      description: Retrieve a list of available routes based on filters
      parameters:
      - description: Departure location
        in: query
        name: departure
        required: true
        type: string
      - description: Destination location
        in: query
        name: destination
        required: true
        type: string
      - description: 'Travel date (format: YYYY-MM-DD)'
        in: query
        name: date
        required: true
        type: string
      - description: Number of passengers
        in: query
        name: passengers
        required: true
        type: integer
      - description: 'Page number for pagination (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size for pagination (default: 30)'
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of routes
          schema:
            items:
              items:
                $ref: '#/definitions/domain.Route'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.Err'
      security:
      - BearerAuth: []
      summary: Get Routes List
      tags:
      - route
  /auth/firebase-signin:
    post:
      consumes:
      - application/json
      description: Verifies the Firebase ID token, retrieves or creates the user,
        and assigns roles if needed.
      parameters:
      - description: Firebase ID Token prefixed with 'Bearer '
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User authenticated successfully
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request - Missing or invalid email
          schema:
            $ref: '#/definitions/errs.Err'
        "401":
          description: Unauthorized - Missing or invalid Authorization header
          schema:
            $ref: '#/definitions/errs.Err'
        "403":
          description: Forbidden - Email must be verified
          schema:
            $ref: '#/definitions/errs.Err'
        "500":
          description: Internal Server Error - Error processing request
          schema:
            $ref: '#/definitions/errs.Err'
      summary: Authenticate user via Firebase ID token
      tags:
      - auth
  /buses:
    post:
      consumes:
      - application/json
      description: Create Bus
      parameters:
      - description: Request Body
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/model.CreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/domain.Bus'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.Err'
      security:
      - BearerAuth: []
      tags:
      - bus
  /buses/{busId}:
    get:
      consumes:
      - application/json
      description: Retrieve a bus by its ID
      parameters:
      - description: Bus ID
        in: path
        name: busId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/domain.Bus'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.Err'
      security:
      - BearerAuth: []
      summary: Get Bus
      tags:
      - bus
  /routes:
    post:
      consumes:
      - application/json
      description: Create a new bus route
      parameters:
      - description: Route creation request
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/model.CreateRouteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/domain.Route'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.Err'
      security:
      - BearerAuth: []
      summary: Create Route
      tags:
      - route
  /routes/{routeId}:
    delete:
      consumes:
      - application/json
      description: Delete a route by its ID
      parameters:
      - description: Route ID
        in: path
        name: routeId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.Err'
      security:
      - BearerAuth: []
      summary: Delete Route
      tags:
      - route
    get:
      consumes:
      - application/json
      description: Retrieve a route by its ID
      parameters:
      - description: Route ID
        in: path
        name: routeId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/domain.Route'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.Err'
      security:
      - BearerAuth: []
      summary: Get Route
      tags:
      - route
    put:
      consumes:
      - application/json
      description: Update an existing route by its ID
      parameters:
      - description: Route ID
        in: path
        name: routeId
        required: true
        type: string
      - description: Update Route Request Body
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/model.UpdateRouteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Route updated successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.Err'
      security:
      - BearerAuth: []
      summary: Update Route
      tags:
      - route
  /users:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of users.
      parameters:
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Number of users per page
        in: query
        maximum: 100
        minimum: 1
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/domain.User'
            type: array
        "500":
          description: Failed to retrieve users
          schema:
            $ref: '#/definitions/errs.Err'
      security:
      - BearerAuth: []
      summary: Get list of users
      tags:
      - users
  /users/{userId}:
    get:
      consumes:
      - application/json
      description: Fetches user details based on the provided user ID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User details retrieved successfully
          schema:
            $ref: '#/definitions/domain.User'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errs.Err'
      security:
      - BearerAuth: []
      summary: Get user details
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Updates user information based on the given user ID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: User update request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/errs.Err'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errs.Err'
      security:
      - BearerAuth: []
      summary: Update user details
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Use "Bearer {your-firebase-token}"
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"

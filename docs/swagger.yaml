definitions:
  domain.Bus:
    properties:
      id:
        type: string
      number:
        type: string
      total_seats:
        type: integer
    type: object
  domain.Page:
    properties:
      Content:
        type: string
      ID:
        type: integer
      Title:
        description: '"about_us", "privacy_policy", "support"'
        type: string
      UpdatedAt:
        type: string
    type: object
  domain.Route:
    properties:
      available_seats:
        type: integer
      bus_id:
        type: string
      created_at:
        type: string
      departure:
        type: string
      destination:
        type: string
      end_date:
        type: string
      id:
        type: string
      price:
        type: integer
      start_date:
        type: string
      updated_at:
        type: string
    type: object
  domain.Ticket:
    properties:
      created_at:
        type: string
      id:
        type: string
      payment_status:
        description: '"pending", "paid", "failed"'
        type: string
      price:
        type: integer
      qr_code:
        description: Optional field for QR code storage
        type: string
      route_id:
        type: string
      status:
        description: '"approved", "cancelled", "awaiting"'
        type: string
      user_id:
        type: string
    type: object
  domain.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      phone:
        type: string
      require_password_reset:
        type: boolean
      role:
        type: string
      updated_at:
        type: string
    type: object
  errs.Err:
    properties:
      errDesc:
        type: string
      error:
        type: string
    type: object
  model.BuyTicketRequest:
    properties:
      quantity:
        type: integer
    type: object
  model.CreateRequest:
    properties:
      number:
        type: string
      total_seats:
        type: integer
    type: object
  model.CreateRouteRequest:
    properties:
      bus_id:
        type: string
      departure:
        type: string
      destination:
        type: string
      end_date:
        example: "2025-12-12T13:00:00+05:00"
        type: string
      price:
        minimum: 0
        type: integer
      start_date:
        example: "2025-12-12T13:00:00+05:00"
        type: string
    required:
    - bus_id
    - departure
    - destination
    - end_date
    - price
    - start_date
    type: object
  model.SigninRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  model.SigninResponse:
    properties:
      access_token:
        type: string
      user:
        $ref: '#/definitions/model.UserResponse'
    type: object
  model.SignupRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  model.SignupResponse:
    properties:
      access_token:
        type: string
      user:
        $ref: '#/definitions/model.UserResponse'
    type: object
  model.UpdatePageRequest:
    properties:
      content:
        type: string
    type: object
  model.UpdateRouteRequest:
    properties:
      bus_id:
        type: string
      departure:
        type: string
      destination:
        type: string
      end_date:
        example: "2025-12-12T13:00:00+05:00"
        type: string
      price:
        minimum: 0
        type: integer
      start_date:
        example: "2025-12-12T13:00:00+05:00"
        type: string
    required:
    - bus_id
    - departure
    - destination
    - end_date
    - price
    - start_date
    type: object
  model.UpdateUserRequest:
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      phone:
        type: string
    type: object
  model.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      firstname:
        type: string
      id:
        type: string
      lastname:
        type: string
      phone:
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact: {}
  description: API documentation for Aulway.
  title: Aulway API
  version: "1.0"
paths:
  /api/all-routes:
    get:
      consumes:
      - application/json
      description: Retrieve a list of routes
      parameters:
      - description: 'Page number for pagination (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size for pagination (default: 30)'
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of routes
          schema:
            items:
              items:
                $ref: '#/definitions/domain.Route'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.Err'
      security:
      - BearerAuth: []
      summary: Get All Routes List
      tags:
      - route
  /api/buses:
    get:
      consumes:
      - application/json
      description: Retrieve a list of buses
      parameters:
      - description: 'Page number for pagination (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size for pagination (default: 30)'
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of buses
          schema:
            items:
              items:
                $ref: '#/definitions/domain.Bus'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.Err'
      security:
      - BearerAuth: []
      summary: Get Buses List
      tags:
      - bus
    post:
      consumes:
      - application/json
      description: Create Bus
      parameters:
      - description: Request Body
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/model.CreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/domain.Bus'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.Err'
      security:
      - BearerAuth: []
      tags:
      - bus
  /api/buses/{busId}:
    get:
      consumes:
      - application/json
      description: Retrieve a bus by its ID
      parameters:
      - description: Bus ID
        in: path
        name: busId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/domain.Bus'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.Err'
      security:
      - BearerAuth: []
      summary: Get Bus
      tags:
      - bus
  /api/pages/{title}:
    get:
      consumes:
      - application/json
      description: 'Retrieves a page''s content by title. Available titles: "about_us",
        "privacy_policy", "help_support".'
      parameters:
      - description: Page Title
        in: path
        name: title
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Page'
        "404":
          description: Page not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get a page
      tags:
      - pages
    put:
      consumes:
      - application/json
      description: 'Updates the content of a page by title. Only admins can update.Available
        titles: "about_us", "privacy_policy", "help_support".'
      parameters:
      - description: Page Title
        in: path
        name: title
        required: true
        type: string
      - description: Page content
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.UpdatePageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Page updated successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to update page
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update a page
      tags:
      - pages
  /api/routes:
    get:
      consumes:
      - application/json
      description: Retrieve a list of available routes based on filters
      parameters:
      - description: Departure location
        in: query
        name: departure
        required: true
        type: string
      - description: Destination location
        in: query
        name: destination
        required: true
        type: string
      - description: 'Travel date (format: YYYY-MM-DD)'
        in: query
        name: date
        required: true
        type: string
      - description: Number of passengers
        in: query
        name: passengers
        required: true
        type: integer
      - description: 'Page number for pagination (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size for pagination (default: 30)'
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of routes
          schema:
            items:
              items:
                $ref: '#/definitions/domain.Route'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.Err'
      security:
      - BearerAuth: []
      summary: Get Routes List
      tags:
      - route
    post:
      consumes:
      - application/json
      description: Create a new bus route
      parameters:
      - description: Route creation request
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/model.CreateRouteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/domain.Route'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.Err'
      security:
      - BearerAuth: []
      summary: Create Route
      tags:
      - route
  /api/routes/{routeId}:
    delete:
      consumes:
      - application/json
      description: Delete a route by its ID
      parameters:
      - description: Route ID
        in: path
        name: routeId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.Err'
      security:
      - BearerAuth: []
      summary: Delete Route
      tags:
      - route
    get:
      consumes:
      - application/json
      description: Retrieve a route by its ID
      parameters:
      - description: Route ID
        in: path
        name: routeId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/domain.Route'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.Err'
      security:
      - BearerAuth: []
      summary: Get Route
      tags:
      - route
    put:
      consumes:
      - application/json
      description: Update an existing route by its ID
      parameters:
      - description: Route ID
        in: path
        name: routeId
        required: true
        type: string
      - description: Update Route Request Body
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/model.UpdateRouteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Route updated successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.Err'
      security:
      - BearerAuth: []
      summary: Update Route
      tags:
      - route
  /api/tickets/{routeId}:
    post:
      consumes:
      - application/json
      description: Allows a user to purchase one or more tickets for a specific route
        using card details.
      parameters:
      - description: Route ID
        in: path
        name: routeId
        required: true
        type: string
      - description: Payment method ID
        in: query
        name: payment_id
        required: true
        type: string
      - description: Buy Ticket Request Body
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/model.BuyTicketRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully purchased tickets
          schema:
            items:
              $ref: '#/definitions/domain.Ticket'
            type: array
        "400":
          description: Invalid request or request binding failed
          schema:
            $ref: '#/definitions/errs.Err'
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Buy tickets
      tags:
      - tickets
  /api/tickets/users/{userId}:
    get:
      consumes:
      - application/json
      description: Fetches a user's past or upcoming tickets based on the type parameter.
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: Type of tickets
        enum:
        - upcoming
        - past
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Ticket'
            type: array
        "400":
          description: Invalid type
          schema:
            $ref: '#/definitions/errs.Err'
        "500":
          description: Failed to fetch tickets
          schema:
            $ref: '#/definitions/errs.Err'
      security:
      - BearerAuth: []
      summary: Get user tickets
      tags:
      - tickets
  /api/tickets/users/{userId}/{ticketId}:
    get:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: Ticket ID
        in: path
        name: ticketId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Ticket'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.Err'
      security:
      - BearerAuth: []
      summary: Get user ticket's detail
      tags:
      - tickets
  /api/users:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of users.
      parameters:
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Number of users per page
        in: query
        maximum: 100
        minimum: 1
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/domain.User'
            type: array
        "500":
          description: Failed to retrieve users
          schema:
            $ref: '#/definitions/errs.Err'
      security:
      - BearerAuth: []
      summary: Get list of users
      tags:
      - users
  /api/users/{userId}:
    delete:
      consumes:
      - application/json
      description: Deletes a user by their ID. Only admin or the user themselves can
        delete.
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User successfully deleted
          schema:
            type: string
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/errs.Err'
        "403":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errs.Err'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/errs.Err'
        "500":
          description: Failed to delete user
          schema:
            $ref: '#/definitions/errs.Err'
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Fetches user details based on the provided user ID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User details retrieved successfully
          schema:
            $ref: '#/definitions/domain.User'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errs.Err'
      security:
      - BearerAuth: []
      summary: Get user details
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Updates user information based on the given user ID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: User update request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: '#/definitions/model.UserResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/errs.Err'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errs.Err'
      security:
      - BearerAuth: []
      summary: Update user details
      tags:
      - users
  /api/users/{userId}/change-password:
    put:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: password change was successful
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.Err'
      security:
      - BearerAuth: []
      summary: Chane password
      tags:
      - users
  /auth/signin:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return an access token.
      parameters:
      - description: Signin Request Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.SigninRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SigninResponse'
        "400":
          description: Bad Request - Invalid request body
          schema:
            $ref: '#/definitions/errs.Err'
        "403":
          description: Forbidden - Password reset required
          schema:
            $ref: '#/definitions/errs.Err'
        "404":
          description: Not Found - User not found or incorrect credentials
          schema:
            $ref: '#/definitions/errs.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.Err'
      summary: User Signin
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Register a new user and return an access token.
      parameters:
      - description: Signup Request Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.SignupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SignupResponse'
        "400":
          description: Bad Request - Invalid request body
          schema:
            $ref: '#/definitions/errs.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.Err'
      summary: User Signup
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    description: Use "Bearer {your-firebase-token}"
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
